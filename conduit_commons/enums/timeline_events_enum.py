from enum import Enum

import strawberry

from conduit_commons.exceptions.not_implemented_exception import EventNotImplemented


@strawberry.enum
class TimelineEventsEnum(Enum):
    TIMELINE_ORDER_CREATED = "TIMELINE_ORDER_CREATED"
    TIMELINE_ORDER_CANCELED = "TIMELINE_ORDER_CANCELED"
    TIMELINE_ORDER_ACCEPTED = "TIMELINE_ORDER_ACCEPTED"
    TIMELINE_ORDER_PENDING_ACCEPTANCE = "TIMELINE_ORDER_PENDING_ACCEPTANCE"
    TIMELINE_ORDER_REJECTED = "TIMELINE_ORDER_REJECTED"
    TIMELINE_ORDER_READY_FOR_SHIPMENT = "TIMELINE_ORDER_READY_FOR_SHIPMENT"
    TIMELINE_ORDER_SHIPPED = "TIMELINE_ORDER_SHIPPED"
    TIMELINE_ORDER_COMPLETED = "TIMELINE_ORDER_COMPLETED"

    # User action events
    TIMELINE_ORDER_MARKED_ELIGIBLE = "TIMELINE_ORDER_MARKED_ELIGIBLE"
    TIMELINE_ORDER_MARKED_INELIGIBLE = "TIMELINE_ORDER_MARKED_INELIGIBLE"
    TIMELINE_ORDER_MARKED_PRE_AUTHORIZED = "TIMELINE_ORDER_MARKED_PRE_AUTHORIZED"
    TIMELINE_ORDER_MARKED_NOT_PRE_AUTHORIZED = "TIMELINE_ORDER_MARKED_NOT_PRE_AUTHORIZED"

    # E-signature events
    TIMELINE_ORDER_ESIGNATURE_SENT = "TIMELINE_ORDER_ESIGNATURE_SENT"
    TIMELINE_ORDER_ESIGNATURE_VIEWED = "TIMELINE_ORDER_ESIGNATURE_VIEWED"
    TIMELINE_ORDER_ESIGNATURE_SIGNED = "TIMELINE_ORDER_ESIGNATURE_SIGNED"


class TimelineEventsEnumV1:
    @staticmethod
    def get_value(enum: str):
        try:
            event = TimelineEventsEnum[enum]

            return f"{event.value}_V1"
        except KeyError:
            raise EventNotImplemented(message=f"Event {enum} not implemented")
